#!/bin/bash

# Define the URL to download the GeoLite2-Country-CSV
GEOIP_CSV_URL="MAXMIND_URL_API_KEY"

# Directory to save the GeoLite2-Country-CSV files
OUTPUT_DIR="/mnt/cache_system/appdata/nginx/www/mikrotik"
TEMP_DIR=$(mktemp -d)  # Temporary directory for current operation
CURRENT_IPS_FILE="$TEMP_DIR/AUNZ_cur_ips.txt"  # Temporary file for current IPs
PREV_IPS_FILE="$OUTPUT_DIR/AUNZ_prev_ips.txt"  # File to store list of previous IPs

# Name of the address list in MikroTik
ADDRESS_LIST_NAME="AUNZ"

# Discord webhook URL and User ID for notifications
DISCORD_WEBHOOK_URL="WEBHOOKURL"
DISCORD_USER_ID="USERID"

# Functions
function send_discord_message() {
    local message="$1"
    local file_info="$2"
    local mention="<@$DISCORD_USER_ID>"
    curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$mention $message\n$file_info\"}" "$DISCORD_WEBHOOK_URL"
}

function get_file_info() {
    local file_path="$1"
    local file_size_bytes=$(stat -c %s "$file_path")
    local file_size_mb=$(bc <<< "scale=1; $file_size_bytes / 1024 / 1024")
    local line_count=$(wc -l < "$file_path")
    echo "File Size: ${file_size_mb} MB, Line Count: $line_count"
}

# Download and unpack the CSV data
mkdir -p "$OUTPUT_DIR"
curl -o "$TEMP_DIR/GeoLite2-Country-CSV.zip" "$GEOIP_CSV_URL"
unzip "$TEMP_DIR/GeoLite2-Country-CSV.zip" -d "$TEMP_DIR"

# Define country codes and their GeoName IDs
declare -A COUNTRY_GEONAMES=(["NZ"]="2186224" ["AU"]="2077456")
CSV_FOLDER=$(find "$TEMP_DIR" -type d -name "GeoLite2-Country-CSV_*" | sort | tail -n 1)

# Extract subnets for specified countries
: > "$CURRENT_IPS_FILE"
for country_code in "${!COUNTRY_GEONAMES[@]}"; do
    geoname_id="${COUNTRY_GEONAMES[$country_code]}"
    awk -F ',' -v id="$geoname_id" '$3 == id {print $1 "," country_code}' "$CSV_FOLDER/GeoLite2-Country-Blocks-IPv4.csv" >> "$CURRENT_IPS_FILE"
done
sort -u "$CURRENT_IPS_FILE" -o "$CURRENT_IPS_FILE"

# Initialize MikroTik script
MikroTikScript="$OUTPUT_DIR/AUNZ_GeoIP.rsc"
echo "/ip firewall address-list remove [find list=$ADDRESS_LIST_NAME]" > "$MikroTikScript"

# Add all current IPs to the MikroTik script
cat "$CURRENT_IPS_FILE" | while IFS=',' read subnet country_code; do
    echo "/ip firewall address-list add list=$ADDRESS_LIST_NAME address=$subnet comment='$country_code'" >> "$MikroTikScript"
done

# Compare and update IPs, notify via Discord
if [ -f "$PREV_IPS_FILE" ]; then
    sort -u "$PREV_IPS_FILE" -o "$PREV_IPS_FILE"
    ADDED_IPS=$(comm -13 <(sort "$PREV_IPS_FILE") <(sort "$CURRENT_IPS_FILE") | wc -l)
    REMOVED_IPS=$(comm -23 <(sort "$PREV_IPS_FILE") <(sort "$CURRENT_IPS_FILE") | wc -l)
    echo "IPs Added: $ADDED_IPS, IPs Removed: $REMOVED_IPS"  # Console output for logs
fi

# Always update the previous IP list after the run
cp "$CURRENT_IPS_FILE" "$PREV_IPS_FILE"

# Clean up
rm -rf "$TEMP_DIR" "$CSV_FOLDER"

# Notify completion
FILE_INFO=$(get_file_info "$MikroTikScript")
send_discord_message "MikroTik script updated with new IPs. IPs Added: $ADDED_IPS, IPs Removed: $REMOVED_IPS." "$FILE_INFO"
echo "MikroTik configuration script generated: $MikroTikScript, Details: $FILE_INFO"
